default:
  image: registry.git.datamasque.com/datamasque-infra/infra-docker-image:3.0

variables:
  PIPELINE_ACTION:
    value: "Plan"
    options:
      - "Plan"
      - "Deploy"
      - "Destroy"
    description: "The pipeline action."
  ENVIRONMENT:
    value: "dtq"
    options:
      - "dtq"
      - "Sandpit"
    description: "The environment to deploy the ECS Cluster."
  TF_VAR_IMAGE_TAG:
    value: "2-25-1-preview-0-19931"
    description: "The Image TAG to be used."

stages:
  - Plan
  - Apply
  - Destroy

.job_template: &tf_init
  - echo "Git Branch - $CI_COMMIT_BRANCH"
  - echo "Deploying ECS Cluster in ${AWSACCOUNT} account."
  - temp_role=$(aws sts assume-role --role-arn="arn:aws:iam::${AWSACCOUNT}:role/core/infra-deployment-role" --role-session-name "Gitlab-ECS-deployment-session")

  - export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
  - export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
  - export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
  - cd cluster-config
  - terraform init
  - terraform workspace select -or-create ${CI_ENVIRONMENT_NAME}

DtqECSPlan:
  stage: Plan
  # variables:
  #   AWSACCOUNT: datamasque-dtq
  script:
    - *tf_init
    - mkdir tf_plan
    - terraform plan -no-color | tee tf_plan/tf_${CI_ENVIRONMENT_NAME}.plan
    - ls -ltr tf_plan/
    - pwd
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master" && $CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - config/dtq.yml
        - cluster-config/*.tf
    - if: '$CI_PIPELINE_SOURCE == "web" && $PIPELINE_ACTION == "Plan" && $ENVIRONMENT == "dtq"'
    - when: never
  environment: dtq
  artifacts:
    paths:
      - cluster-config/tf_plan/tf_${CI_ENVIRONMENT_NAME}.plan
    expire_in: 7 days

DtqECSApply:
  stage: Apply
  # variables:
  #   AWSACCOUNT: datamasque-dtq
  script:
    - *tf_init
    - terraform plan -out=plan_${CI_ENVIRONMENT_NAME}.tf
    - terraform apply plan_${CI_ENVIRONMENT_NAME}.tf
  rules:
    # - if: '$CI_COMMIT_BRANCH =~ /^master/ && $CI_PIPELINE_SOURCE == "push"'
    #   changes:
    #     - config/dtq.yml
    #     - cluster-config/*.tf
    # - if: '$CI_PIPELINE_SOURCE == "web" && $PIPELINE_ACTION == "Deploy" && $CI_COMMIT_BRANCH =~ /^master/ && $ENVIRONMENT == "dtq"'
    - if: '$CI_PIPELINE_SOURCE == "web" && $PIPELINE_ACTION == "Deploy" && $ENVIRONMENT == "dtq"'
    - when: never
  environment: dtq
  dependencies:
    - DtqECSPlan

DtqECSDestroy:
  stage: Destroy
  environment: dtq
  script:
    - *tf_init
    - terraform destroy -auto-approve
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $PIPELINE_ACTION == "Destroy" && $ENVIRONMENT == "dtq"'
    - when: never
